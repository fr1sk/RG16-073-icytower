package com.maxim.panzerbattles.game.scenario.menu.dialogs;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.ui.Cell;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton.TextButtonStyle;
import com.badlogic.gdx.scenes.scene2d.ui.Window;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
import com.badlogic.gdx.scenes.scene2d.utils.Drawable;
import com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable;
import com.badlogic.gdx.utils.Align;
import com.badlogic.gdx.utils.Array;
import com.maxim.panzerbattles.game.render.Resources;
import com.maxim.panzerbattles.game.scenario.Scenario;
import com.maxim.panzerbattles.game.scenario.State;
import com.maxim.panzerbattles.game.scenario.unit.UnitClass;
import com.maxim.panzerbattles.game.scenario.unit.UnitClass.UnitClassType;
import com.maxim.panzerbattles.game.scenario.unit.UnitClass.UnitMedium;
import com.maxim.panzerbattles.game.scenario.unit.type.UnitType;
import com.maxim.panzerbattles.game.screens.OperationalScreen;
import com.maxim.panzerbattles.game.utils.StringUtils;

public abstract class BaseArmyFrame extends Window {
    static final Logger logger = LoggerFactory.getLogger(BaseArmyFrame.class);

    int frameWidth;
    int frameHeight;

    Label influenceLabel;

    Cell<Table> cellForTableClasses;
    Table tableClassesAir;
    Table tableClassesLand;
    Table tableClassesNaval;
    Table tableMediums;
    Table tableStates;
    ScrollPane scrollPaneUnits;
    ScrollPane scrollPaneInfo;

    Table tableMiddleLeft;
    Table tableMiddle;
    Table tableMiddleRight;
    Table tableTop;
    Table tableRightInfo;
    Table tableUnits;

    TextButton buttonClose;

    UnitMedium selectedMedium = UnitMedium.AIR;
    State selectedState = null;
    UnitClassType selectedClassType = null;

    TextButton checkedState;
    TextButton checkedClass;
    TextButton checkedMedium;

    TextButton startState;
    TextButton startClass;
    TextButton startMedium;

    String checkedStateString;
    String checkedClassString;

    OperationalScreen operationalScreen;
    Scenario scenario;
    Skin skin;
    Drawable background;
    Skin skin2;

    protected BaseArmyFrame(String frameTitle, OperationalScreen operationalScreen) {
        super(frameTitle, Resources.skin);

        this.operationalScreen = operationalScreen;
        this.scenario = operationalScreen.scenario;
        this.skin = Resources.skin;

        skin2 = new Skin(Gdx.files.internal("resources/skin/assets/uiskin.json"));
        background = new TextureRegionDrawable(new TextureRegion(
				new Texture(Gdx.files.local("/resources/images/menu/deploy_menu/deploy_background.png"))));
		this.setBackground(background);

        createWidgets();
        initFrame();
        setSelect();
        //debug(); predstavalja ceo window
    }


    protected abstract void filter();


    private void createWidgets() {

        tableMiddleLeft = new Table(skin);
        //tableMiddleLeft.debug().setColor(Color.CYAN); predstavlja levi meni sa biranjem jedinica
        tableMiddle = new Table(skin);
        //tableMiddle.debug(); sve tabele u purchase windowu
        tableMiddleRight = new Table(skin);
        //tableMiddleRight.debug(); desna tabela purchase
        tableTop = new Table(skin);
        //tableTop.debug(); info na topu
        tableRightInfo = new Table(skin);
        //tableRightInfo.debug(); informacije o proizvodu u desnoj tabeli
        tableUnits = new Table(skin);
        //tableUnits.debug(); main proizvodi

        Drawable tableUnitsBackground = new TextureRegionDrawable(new TextureRegion(
				new Texture(Gdx.files.local("/resources/images/menu/turn_menu/transparent.png"))));
		tableUnits.setBackground(background);
        tableUnits.debug().setColor(Color.CYAN);



        tableRightInfo.align(Align.topLeft);
        tableRightInfo.columnDefaults(0).left();
        tableRightInfo.columnDefaults(1).left().padRight(5);
        tableUnits.align(Align.topLeft);

        influenceLabel = new Label("", skin);

        //Skin skinWar = new Skin(Gdx.files.internal("resources/skin/assets/uiskin.json"));
        scrollPaneInfo = new ScrollPane(tableRightInfo, skin);
        scrollPaneUnits = new ScrollPane(tableUnits, skin);
        scrollPaneInfo.setFadeScrollBars(false);
        scrollPaneUnits.setFadeScrollBars(false);
        //System.out.println("SKINWAR "+Resources.skinWar);
        //System.out.println("SKINWAR 2"+skin2);


        //tableClasses - u zavisnosti koj medium se izabere, pojavluju se ti dugmici koji se nalaze u table classes
        tableClassesAir = new Table(Resources.skin);
        tableClassesAir.columnDefaults(0).fillX();
        tableClassesAir.columnDefaults(1).fillX();
        tableClassesAir.columnDefaults(2).fillX();
        tableClassesLand = new Table(Resources.skin);
        tableClassesLand.columnDefaults(0).fillX();
        tableClassesLand.columnDefaults(1).fillX();
        tableClassesLand.columnDefaults(2).fillX();
        tableClassesNaval = new Table(Resources.skin);
        tableClassesNaval.columnDefaults(0).fillX();
        tableClassesNaval.columnDefaults(1).fillX();
        tableClassesNaval.columnDefaults(2).fillX();
        tableMediums = new Table(Resources.skin);
        tableMediums.columnDefaults(0).fillX();
        tableMediums.columnDefaults(1).fillX();
        tableMediums.columnDefaults(2).fillX();
        tableStates = new Table(Resources.skin);
        tableStates.columnDefaults(0).fillX();
        tableStates.columnDefaults(1).fillX();
        tableStates.columnDefaults(2).fillX();

        setTableMediums();
        setTableClasses();
        setPlayerStates();

        buttonClose = new TextButton("Close", skin);
    }

    public void setTableClasses() {
        Array<String> classNames = new Array<String>();

        classNames.add("All");
        for (UnitClassType classType : UnitClass.getClassTypesByMedium(UnitMedium.AIR))
        	if (classType.isIndependent())
        		classNames.add(StringUtils.toNameFormat(classType.toString()));
        int counter = 0;
        for (final String classAirName : classNames) {
            final TextButton button = new TextButton(classAirName, Resources.skin.get("toggle", TextButtonStyle.class));
            button.addListener(new ClickListener() {
                @Override
                public void clicked(InputEvent event, float x, float y) {
                    super.clicked(event, x, y);
                    selectedClassType = UnitClassType.getUnitClassTypeByString(classAirName);
                    deselectOtherClasses(button);
                    filter();
                }
            });
            tableClassesAir.add(button);
            counter++;
            if (counter % 2 == 0) {
                tableClassesAir.row();
            }
        }
        ///
        classNames.clear();

        classNames.add("All");
        for (UnitClassType classType : UnitClass.getClassTypesByMedium(UnitMedium.LAND))
        	if (classType.isIndependent())
        		if(scenario.editor || (!scenario.editor && !classType.equals(UnitClassType.BUILDING)))
        			classNames.add(StringUtils.toNameFormat(classType.toString()));
        counter = 0;
        for (final String classLandName : classNames) {
            final TextButton button = new TextButton(classLandName, Resources.skin.get("toggle", TextButtonStyle.class));
            button.addListener(new ClickListener() {
                @Override
                public void clicked(InputEvent event, float x, float y) {
                    super.clicked(event, x, y);
                    selectedClassType = UnitClassType.getUnitClassTypeByString(classLandName);
                    deselectOtherClasses(button);
                    filter();
                }
            });
            tableClassesLand.add(button);
            counter++;
            if (counter % 2 == 0) {
                tableClassesLand.row();
            }

            if (counter == 1) {
            	startClass = button;
            	checkedClassString = classLandName;
            }
        }
        ///
        classNames.clear();

        classNames.add("All");
        for (UnitClassType classType : UnitClass.getClassTypesByMedium(UnitMedium.NAVAL))
        	if (classType.isIndependent())
        		classNames.add(StringUtils.toNameFormat(classType.toString()));
        counter = 0;
        for (final String classNavalName : classNames) {
            final TextButton button = new TextButton(classNavalName, Resources.skin.get("toggle", TextButtonStyle.class));
            button.addListener(new ClickListener() {
                @Override
                public void clicked(InputEvent event, float x, float y) {
                    super.clicked(event, x, y);
                    selectedClassType = UnitClassType.getUnitClassTypeByString(classNavalName);
                    deselectOtherClasses(button);
                    filter();
                }
            });
            tableClassesNaval.add(button);
            counter++;
            if (counter % 2 == 0) {
                tableClassesNaval.row();
            }
        }
    }

    private void setTableMediums() {
        final TextButton buttonAir = new TextButton("Air", Resources.skin.get("toggle", TextButtonStyle.class));
        final TextButton buttonLand = new TextButton("Land", Resources.skin.get("toggle", TextButtonStyle.class));
        final TextButton buttonNaval = new TextButton("Naval", Resources.skin.get("toggle", TextButtonStyle.class));
        buttonAir.addListener(new ClickListener() {
            @Override
            public void clicked(InputEvent event, float x, float y) {
                super.clicked(event, x, y);
                deselectOtherMediums(buttonAir);
                selectedMedium = UnitMedium.AIR;
                updateTableClasses();
                filter();
            }
        });
        buttonLand.addListener(new ClickListener() {
            @Override
            public void clicked(InputEvent event, float x, float y) {
                super.clicked(event, x, y);
                deselectOtherMediums(buttonLand);
                selectedMedium = UnitMedium.LAND;
                updateTableClasses();
                filter();
            }
        });
        buttonNaval.addListener(new ClickListener() {
            @Override
            public void clicked(InputEvent event, float x, float y) {
                super.clicked(event, x, y);
                deselectOtherMediums(buttonNaval);
                selectedMedium = UnitMedium.NAVAL;
                updateTableClasses();
                filter();
            }
        });
        tableMediums.add(buttonAir);
        tableMediums.add(buttonLand);
        tableMediums.add(buttonNaval).row();

        startMedium = buttonLand;
    }

    private void updateTableClasses() {
        switch (selectedMedium) {
            case AIR:
                cellForTableClasses.setActor(tableClassesAir);
                break;
            case LAND:
                cellForTableClasses.setActor(tableClassesLand);
                break;
            case NAVAL:
                cellForTableClasses.setActor(tableClassesNaval);
                break;
            default:
                break;
        }
    }

    private void initFrame() {
        frameWidth = Gdx.graphics.getWidth() * 3 / 4;
        frameHeight = Gdx.graphics.getHeight() * 3 / 4;

        this.setSize(frameWidth, frameHeight);
        this.setPosition(0.5f * (Gdx.graphics.getWidth() - this.getWidth()), 0.5f * (Gdx.graphics.getHeight() - this.getHeight()));
        this.defaults().padBottom(25);
        this.setVisible(false);
        this.setMovable(false);

        tableTop.add("Graphics here").padRight(25);
        tableTop.add("Value here").padLeft(25).row();
        tableTop.add("Influence").padRight(25);
        tableTop.add(influenceLabel).padLeft(25);

        tableMiddleLeft.defaults().padBottom(5).left().top();
        tableMiddleLeft.left().top();
        tableMiddleLeft.add(new Label("Medium: ", Resources.skin));
        tableMiddleLeft.add(tableMediums).row();
        tableMiddleLeft.add(new Label("State: ", Resources.skin));
        tableMiddleLeft.add(tableStates).row();
        tableMiddleLeft.add(new Label("Class: ", Resources.skin));
        cellForTableClasses = tableMiddleLeft.add();//Placeholder for table with unit classes

        tableMiddleRight.add(scrollPaneInfo).width(250).expandY().fillY().row();

        tableMiddle.add(tableMiddleLeft).expandY().fillY().width(300).padRight(5);
        tableMiddle.add(scrollPaneUnits).expand().fill().padRight(5);
        tableMiddle.add(tableMiddleRight).expandY().fillY().width(250);

        this.add(tableTop).expandX().fillX().row();
        this.add(tableMiddle).expand().fill().row();
        this.add(buttonClose);

        buttonClose.addListener(new ClickListener() {
            @Override
            public void clicked(InputEvent event, float x, float y) {
                super.clicked(event, x, y);
                BaseArmyFrame.this.toggleFrame();
            }
        });
    }


    protected boolean matchesFilter(UnitType unitType) {
        if (unitType.unitClass.unitMedium == selectedMedium
                && (selectedState == null || unitType.state.equals(selectedState))
                && (selectedClassType == null || unitType.unitClass.unitClassType == selectedClassType)
                && !unitType.unitClass.unitClassType.equals(UnitClassType.BUILDING)
        		&& unitType.unitClass.unitClassType.isIndependent())
            return true;
        return false;
    }


    private void setPlayerStates() {
        tableStates.clear();
        Array<String> tempStates = new Array<String>();
        for (State state : scenario.getSideCurrent().sideStates)
            tempStates.add(StringUtils.toNameFormat(state.stateName.toString()));
        tempStates.sort();

        Array<String> statesList = new Array<String>();
        statesList.add("All");
        statesList.addAll(tempStates);
        int counter = 0;
        for (final String stateName : statesList) {
            final TextButton button = new TextButton(stateName, Resources.skin.get("toggle", TextButtonStyle.class));
            button.addListener(new ClickListener() {
                @Override
                public void clicked(InputEvent event, float x, float y) {
                    super.clicked(event, x, y);
                    if (stateName.equals("All")) {
                        selectedState = null;
                    } else {
                        selectedState = State.getStateByName(stateName);
                    }
                    deselectOtherStates(button);
                    filter();
                }
            });
            tableStates.add(button);
            counter++;
            if (counter % 3 == 0) {
                tableStates.row();
            }

            if(counter == 2) {
            	startState = button;
            	checkedStateString = stateName;
            }
        }
    }

    public void deselectOtherStates(TextButton but) {
        if (checkedState != null) {
            if (checkedState.equals(but)) {
                checkedState.setChecked(true);
                return;
            }
            checkedState.setChecked(false);
        }
        checkedState = but;
    }

    public void deselectOtherMediums(TextButton but) {
        if (checkedMedium != null) {
            if (checkedMedium.equals(but)) {
                checkedMedium.setChecked(true);
                return;
            }
            checkedMedium.setChecked(false);
        }
        checkedMedium = but;
    }

    public void deselectOtherClasses(TextButton but) {
        if (checkedClass != null) {
            if (checkedClass.equals(but)) {
                checkedClass.setChecked(true);
                return;
            }
            checkedClass.setChecked(false);
        }
        checkedClass = but;
    }

    public void toggleFrame() {
        if (this.isVisible()) {
            Gdx.input.setInputProcessor(operationalScreen.multiplexer);
            /*selectedClassType = null;
            selectedState = null;
            selectedMedium = null;
            if (checkedClass != null) {
                checkedClass.setChecked(false);
                checkedClass = null;
            }
            if (checkedMedium != null) {
                checkedMedium.setChecked(false);
                checkedMedium = null;
            }
            if (checkedState != null) {
                checkedState.setChecked(false);
                checkedState = null;
            }*/
            operationalScreen.menu.basicControlDl.populateDialogLayout();
            this.setVisible(false);
        } else {
            influenceLabel.setText(Integer.toString(scenario.getSideCurrent().influence));
            //setPlayerStates();
            //filter();
            setSelect();
            Gdx.input.setInputProcessor(operationalScreen.stage);

            this.setVisible(true);
        }
    }

    public void setSelect() {
    	if(checkedClass == null && checkedMedium == null && checkedState == null) {
    		startClass.setChecked(true);
            selectedClassType = UnitClassType.getUnitClassTypeByString(checkedClassString);
            deselectOtherClasses(startClass);

            startMedium.setChecked(true);
            deselectOtherMediums(startMedium);
            selectedMedium = UnitMedium.LAND;
            updateTableClasses();

            startState.setChecked(true);
        	selectedState = State.getStateByName(checkedStateString);
        	deselectOtherStates(startState);
    	}

    	filter();
    }

}
